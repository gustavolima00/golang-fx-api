// Code generated by mockery. DO NOT EDIT.

package mockrepositories

import (
	models "go-api/src/models"

	mock "github.com/stretchr/testify/mock"
)

// MockCommentRepository is an autogenerated mock type for the CommentRepository type
type MockCommentRepository struct {
	mock.Mock
}

type MockCommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentRepository) EXPECT() *MockCommentRepository_Expecter {
	return &MockCommentRepository_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: comment
func (_m *MockCommentRepository) CreateComment(comment models.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockCommentRepository_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - comment models.Comment
func (_e *MockCommentRepository_Expecter) CreateComment(comment interface{}) *MockCommentRepository_CreateComment_Call {
	return &MockCommentRepository_CreateComment_Call{Call: _e.mock.On("CreateComment", comment)}
}

func (_c *MockCommentRepository_CreateComment_Call) Run(run func(comment models.Comment)) *MockCommentRepository_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Comment))
	})
	return _c
}

func (_c *MockCommentRepository_CreateComment_Call) Return(_a0 error) *MockCommentRepository_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_CreateComment_Call) RunAndReturn(run func(models.Comment) error) *MockCommentRepository_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskComments provides a mock function with given fields: id
func (_m *MockCommentRepository) GetTaskComments(id int) []models.Comment {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskComments")
	}

	var r0 []models.Comment
	if rf, ok := ret.Get(0).(func(int) []models.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	return r0
}

// MockCommentRepository_GetTaskComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskComments'
type MockCommentRepository_GetTaskComments_Call struct {
	*mock.Call
}

// GetTaskComments is a helper method to define mock.On call
//   - id int
func (_e *MockCommentRepository_Expecter) GetTaskComments(id interface{}) *MockCommentRepository_GetTaskComments_Call {
	return &MockCommentRepository_GetTaskComments_Call{Call: _e.mock.On("GetTaskComments", id)}
}

func (_c *MockCommentRepository_GetTaskComments_Call) Run(run func(id int)) *MockCommentRepository_GetTaskComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCommentRepository_GetTaskComments_Call) Return(_a0 []models.Comment) *MockCommentRepository_GetTaskComments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_GetTaskComments_Call) RunAndReturn(run func(int) []models.Comment) *MockCommentRepository_GetTaskComments_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentRepository creates a new instance of MockCommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentRepository {
	mock := &MockCommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
